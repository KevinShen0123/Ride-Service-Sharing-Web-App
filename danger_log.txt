1. At the very beginning, when we designed the login page, we did not take care of the user input format checking, if the user inputted something in an illegal format, we didn't handle it, then in this version, we add format checking of user inputs.
2. Also for the login page, our first design did not include the situation where the user input nothing and chose to register or log in, which is invalid and will harm our user experience. We add the input-checking functions in this version.
3. In our previous versions, we split out too many files to do different tasks with bad naming, also, our naming in html files was also not that clear, which caused a lot of unnecessary confusion in the whole development process. The problems have been solved in the project files now. And we will take an eye on this issue in the next homework.
4. The UI of some pages in our web-app was not that good in the first few versions, we made a lot of changes to them.
5. We didn't add var CSRF_TOKEN = "{{ csrf_token }}" in the html file when we use jquery in the first version, which made server error!
6. In previous versions, our way to store user information in different parts was different, which caused a lot of issues in conversion and understanding. We fixed the problem in this version by using data models in models.py and sessions to store the related information.
7. We noticed that it was pretty easy for users to enter the pages which should not be open to them, for example, if one user did not log in but input the url to the personal information page in the browser, it would lead to the server error, which was not acceptable. 
   To fix this problem, we record information in the session, each time users want to get access to one service, their session would be checked first, if the necessary information does not exist, they would be redirected back to the login page.
8. We also found that if the user stay on the page but the status of that page had been changed, since the labels of the page could not be changed without interaction, in this situation, when the user still clicked one item which should not exist, it would lead to the data inconsistency, which could be harmful to the whole system.
   To fix this problem, we create checkers for every request, the server does not believe the correctness of data sent by the front-end unless they pass the checkers, in this way, when the user clicks a button that should not exist, the server would send back an error message and tell the browser to flush that page to show the user the latest status of the current page.
9. When we try to send emails, we noticed that the front-end page would get stuck when the users clicked the triggering button, especially when the number of riders was large.
   To fix this problem, we use multithreading to send emails, thus the users could get responses as soon as they clicked the triggering button.